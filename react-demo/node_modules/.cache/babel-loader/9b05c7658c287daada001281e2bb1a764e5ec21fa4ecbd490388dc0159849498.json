{"ast":null,"code":"import _regeneratorRuntime from \"/home/ioana/Desktop/Energy Management System/react-demo/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/ioana/Desktop/Energy Management System/react-demo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/home/ioana/Desktop/Energy Management System/react-demo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/ioana/Desktop/Energy Management System/react-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/home/ioana/Desktop/Energy Management System/react-demo/src/client/chat.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { createRoot } from 'react-dom'; // Import createRoot from react-dom\nimport { MessageBox, MessageList, Input, Button, ChatItem, ChatList } from 'react-chat-elements';\nimport SockJsClient from 'react-stomp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ChatWindow = function ChatWindow(_ref) {\n  _s();\n  var isOpen = _ref.isOpen,\n    onClose = _ref.onClose;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedUser = _useState4[0],\n    setSelectedUser = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    users = _useState6[0],\n    setUsers = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    messages = _useState8[0],\n    setMessages = _useState8[1];\n  var clientRef = useRef(null);\n  var handleMessage = function handleMessage(msg) {\n    setMessages([].concat(_toConsumableArray(messages), [msg]));\n  };\n  var fetchAdminUsers = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var token, response, data;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            token = localStorage.getItem('token');\n            _context.next = 4;\n            return fetch('http://localhost:8080/user/chat-admins', {\n              method: 'GET',\n              headers: {\n                'Authorization': 'Bearer ' + token\n              }\n            });\n          case 4:\n            response = _context.sent;\n            if (response.ok) {\n              _context.next = 8;\n              break;\n            }\n            console.error('Failed to fetch admin users for chat');\n            return _context.abrupt(\"return\", []);\n          case 8:\n            _context.next = 10;\n            return response.json();\n          case 10:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('Error fetching admin users:', _context.t0);\n            return _context.abrupt(\"return\", []);\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 14]]);\n    }));\n    return function fetchAdminUsers() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    fetchAdminUsers().then(function (usersData) {\n      setUsers(usersData);\n    });\n  }, []);\n  var handleSendMessage = function handleSendMessage() {\n    if (selectedUser && message.trim() !== '' && clientRef.current && clientRef.current.sendMessage) {\n      var newMessage = {\n        text: message,\n        sender: 'CurrentLoggedInUser',\n        // Replace with the logged-in user\n        messageType: 'MESSAGE' // Adjust message type if needed based on the MessageType enum\n      };\n\n      clientRef.current.sendMessage(\"/app/chat/\".concat(selectedUser), JSON.stringify(newMessage));\n      setMessage('');\n    }\n  };\n  var handleKeyPress = function handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  var handleConnect = function handleConnect() {\n    console.log('Connected to WebSocket');\n  };\n  var handleDisconnect = function handleDisconnect() {\n    console.log('Disconnected from WebSocket');\n  };\n  var handleError = function handleError(error) {\n    console.error('WebSocket error:', error);\n  };\n  return isOpen &&\n  // Use createRoot instead of ReactDOM.render\n  createRoot(document.getElementById('root')).render( /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(ChatList, {\n      className: \"chat-list\",\n      dataSource: messages.map(function (msg, index) {\n        return /*#__PURE__*/_jsxDEV(ChatItem, {\n          avatar: 'Avatar URL' // Replace with sender's avatar URL\n          ,\n          alt: 'User',\n          title: msg.sender,\n          subtitle: msg.text,\n          date: new Date(),\n          unread: 0\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, _this), /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"Type a message...\",\n      multiline: false,\n      value: message,\n      onChange: function onChange(e) {\n        return setMessage(e.target.value);\n      },\n      onKeyPress: handleKeyPress,\n      rightButtons: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"white\",\n        backgroundColor: \"black\",\n        text: \"Send\",\n        onClick: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }, _this), /*#__PURE__*/_jsxDEV(SockJsClient, {\n      url: \"http://localhost:8083/chat\" // Replace with your backend URL\n      ,\n      topics: [\"/topic/messages/\".concat(selectedUser)] // Use selected user for topic\n      ,\n      onMessage: handleMessage,\n      onConnect: handleConnect,\n      onDisconnect: handleDisconnect,\n      onError: handleError,\n      debug: false,\n      ref: function ref(client) {\n        return clientRef.current = client;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 17\n  }, _this));\n};\n_s(ChatWindow, \"HmcRGZ2tHMDcO+5F4KVODkarPLE=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","createRoot","MessageBox","MessageList","Input","Button","ChatItem","ChatList","SockJsClient","jsxDEV","_jsxDEV","ChatWindow","_ref","_s","isOpen","onClose","_useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","selectedUser","setSelectedUser","_useState5","_useState6","users","setUsers","_useState7","_useState8","messages","setMessages","clientRef","handleMessage","msg","concat","_toConsumableArray","fetchAdminUsers","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","response","data","wrap","_callee$","_context","prev","next","localStorage","getItem","fetch","method","headers","sent","ok","console","error","abrupt","json","t0","stop","apply","arguments","then","usersData","handleSendMessage","trim","current","sendMessage","newMessage","text","sender","messageType","JSON","stringify","handleKeyPress","event","key","handleConnect","log","handleDisconnect","handleError","document","getElementById","render","className","children","dataSource","map","index","avatar","alt","title","subtitle","date","Date","unread","fileName","_jsxFileName","lineNumber","columnNumber","_this","placeholder","multiline","value","onChange","e","target","onKeyPress","rightButtons","color","backgroundColor","onClick","url","topics","onMessage","onConnect","onDisconnect","onError","debug","ref","client","_c","$RefreshReg$"],"sources":["/home/ioana/Desktop/Energy Management System/react-demo/src/client/chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { createRoot } from 'react-dom'; // Import createRoot from react-dom\nimport { MessageBox, MessageList, Input, Button, ChatItem, ChatList } from 'react-chat-elements';\nimport SockJsClient from 'react-stomp';\n\nconst ChatWindow = ({ isOpen, onClose }) => {\n    const [message, setMessage] = useState('');\n    const [selectedUser, setSelectedUser] = useState('');\n    const [users, setUsers] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const clientRef = useRef(null);\n\n    const handleMessage = (msg) => {\n        setMessages([...messages, msg]);\n    };\n\n    const fetchAdminUsers = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await fetch('http://localhost:8080/user/chat-admins', {\n                method: 'GET',\n                headers: {\n                    'Authorization': 'Bearer ' + token,\n                },\n            });\n\n            if (!response.ok) {\n                console.error('Failed to fetch admin users for chat');\n                return [];\n            }\n\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching admin users:', error);\n            return [];\n        }\n    };\n\n    useEffect(() => {\n        fetchAdminUsers().then((usersData) => {\n            setUsers(usersData);\n        });\n    }, []);\n\n    const handleSendMessage = () => {\n        if (selectedUser && message.trim() !== '' && clientRef.current && clientRef.current.sendMessage) {\n            const newMessage = {\n                text: message,\n                sender: 'CurrentLoggedInUser', // Replace with the logged-in user\n                messageType: 'MESSAGE', // Adjust message type if needed based on the MessageType enum\n            };\n            clientRef.current.sendMessage(`/app/chat/${selectedUser}`, JSON.stringify(newMessage));\n            setMessage('');\n        }\n    };\n\n    const handleKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            handleSendMessage();\n        }\n    };\n\n    const handleConnect = () => {\n        console.log('Connected to WebSocket');\n    };\n\n    const handleDisconnect = () => {\n        console.log('Disconnected from WebSocket');\n    };\n\n    const handleError = (error) => {\n        console.error('WebSocket error:', error);\n    };\n\n    return (\n        isOpen && (\n            // Use createRoot instead of ReactDOM.render\n            createRoot(document.getElementById('root')).render(\n                <div className=\"chat-window\">\n                    <ChatList\n                        className=\"chat-list\"\n                        dataSource={messages.map((msg, index) => (\n                            <ChatItem\n                                key={index}\n                                avatar={'Avatar URL'} // Replace with sender's avatar URL\n                                alt={'User'}\n                                title={msg.sender}\n                                subtitle={msg.text}\n                                date={new Date()}\n                                unread={0}\n                            />\n                        ))}\n                    />\n                    <Input\n                        placeholder=\"Type a message...\"\n                        multiline={false}\n                        value={message}\n                        onChange={(e) => setMessage(e.target.value)}\n                        onKeyPress={handleKeyPress}\n                        rightButtons={\n                            <Button\n                                color=\"white\"\n                                backgroundColor=\"black\"\n                                text=\"Send\"\n                                onClick={handleSendMessage}\n                            />\n                        }\n                    />\n                    <SockJsClient\n                        url=\"http://localhost:8083/chat\" // Replace with your backend URL\n                        topics={[`/topic/messages/${selectedUser}`]} // Use selected user for topic\n                        onMessage={handleMessage}\n                        onConnect={handleConnect}\n                        onDisconnect={handleDisconnect}\n                        onError={handleError}\n                        debug={false}\n                        ref={(client) => (clientRef.current = client)}\n                    />\n                </div>\n            )\n        )\n    );\n};\n\nexport default ChatWindow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
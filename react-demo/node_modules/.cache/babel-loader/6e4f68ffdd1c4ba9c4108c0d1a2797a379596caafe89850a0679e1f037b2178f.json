{"ast":null,"code":"import _classCallCheck from \"/home/ioana/Desktop/Energy Management System/react-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/ioana/Desktop/Energy Management System/react-demo/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/ioana/Desktop/Energy Management System/react-demo/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/ioana/Desktop/Energy Management System/react-demo/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/home/ioana/Desktop/Energy Management System/react-demo/src/chat/chat.js\";\nimport { Component } from \"react\";\nimport { ChatMessage } from \"../lib/types\";\nimport { ChatRow } from \"./\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar url = process.env.API_BASE_URL ? process.env.API_BASE_URL : \"http://localhost:8080\";\nvar ChatList = /*#__PURE__*/function (_Component) {\n  _inherits(ChatList, _Component);\n  var _super = _createSuper(ChatList);\n  function ChatList() {\n    var _this;\n    _classCallCheck(this, ChatList);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      messages: []\n    };\n    return _this;\n  }\n  _createClass(ChatList, [{\n    key: \"componentDidMount\",\n    value:\n    // After the component did mount, we set the state each second.\n    function componentDidMount() {\n      var _this2 = this;\n      var source = new EventSource(\"\".concat(url, \"/chats/stream?channelId=\").concat(this.props.channelId));\n      source.onmessage = function (event) {\n        var messages = _this2.state.messages.concat(JSON.parse(event.data));\n        _this2.setState({\n          messages: messages\n        });\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var list = this.state.messages.map(function (row) {\n        return /*#__PURE__*/_jsxDEV(ChatRow, {\n          item: row\n        }, row.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 20\n        }, _this3);\n      });\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"chatlist\",\n        children: list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }, this);\n    }\n  }]);\n  return ChatList;\n}(Component);\nexport default ChatList;","map":{"version":3,"names":["Component","ChatMessage","ChatRow","jsxDEV","_jsxDEV","url","process","env","API_BASE_URL","ChatList","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","messages","_createClass","key","value","componentDidMount","_this2","source","EventSource","props","channelId","onmessage","event","JSON","parse","data","setState","render","_this3","list","map","row","item","id","fileName","_jsxFileName","lineNumber","columnNumber","className","children"],"sources":["/home/ioana/Desktop/Energy Management System/react-demo/src/chat/chat.js"],"sourcesContent":["import { Component } from \"react\";\nimport { ChatMessage } from \"../lib/types\";\nimport { ChatRow } from \"./\";\n\ninterface ChatListState {\n    messages: ChatMessage[];\n}\n\ninterface ChatListProps {\n    channelId: number;\n}\n\nconst url = process.env.API_BASE_URL\n    ? process.env.API_BASE_URL\n    : \"http://localhost:8080\";\n\nclass ChatList extends Component<ChatListProps, ChatListState> {\n    state: ChatListState = { messages: [] };\n\n    // After the component did mount, we set the state each second.\n    componentDidMount() {\n        const source = new EventSource(\n            `${url}/chats/stream?channelId=${this.props.channelId}`\n        );\n\n        source.onmessage = (event) => {\n            const messages = this.state.messages.concat(JSON.parse(event.data));\n            this.setState({ messages });\n        };\n    }\n\n    render() {\n        const list = this.state.messages.map((row) => {\n            return <ChatRow key={row.id} item={row} />;\n        });\n\n        return <ul className=\"chatlist\">{list}</ul>;\n    }\n}\nexport default ChatList;"],"mappings":";;;;;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,OAAO,QAAQ,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU7B,IAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,YAAY,GAC9BF,OAAO,CAACC,GAAG,CAACC,YAAY,GACxB,uBAAuB;AAAC,IAExBC,QAAQ,0BAAAC,UAAA;EAAAC,SAAA,CAAAF,QAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,QAAA;EAAA,SAAAA,SAAA;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,QAAA;IAAA,SAAAO,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAAAP,KAAA,GAAAF,MAAA,CAAAU,IAAA,CAAAC,KAAA,CAAAX,MAAA,SAAAY,MAAA,CAAAL,IAAA;IAAAL,KAAA,CACVW,KAAK,GAAkB;MAAEC,QAAQ,EAAE;IAAG,CAAC;IAAA,OAAAZ,KAAA;EAAA;EAAAa,YAAA,CAAAlB,QAAA;IAAAmB,GAAA;IAAAC,KAAA;IAEvC;IACA,SAAAC,kBAAA,EAAoB;MAAA,IAAAC,MAAA;MAChB,IAAMC,MAAM,GAAG,IAAIC,WAAW,IAAAT,MAAA,CACvBnB,GAAG,8BAAAmB,MAAA,CAA2B,IAAI,CAACU,KAAK,CAACC,SAAS,CACzD,CAAC;MAEDH,MAAM,CAACI,SAAS,GAAG,UAACC,KAAK,EAAK;QAC1B,IAAMX,QAAQ,GAAGK,MAAI,CAACN,KAAK,CAACC,QAAQ,CAACF,MAAM,CAACc,IAAI,CAACC,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC;QACnET,MAAI,CAACU,QAAQ,CAAC;UAAEf,QAAQ,EAARA;QAAS,CAAC,CAAC;MAC/B,CAAC;IACL;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAED,SAAAa,OAAA,EAAS;MAAA,IAAAC,MAAA;MACL,IAAMC,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACC,QAAQ,CAACmB,GAAG,CAAC,UAACC,GAAG,EAAK;QAC1C,oBAAO1C,OAAA,CAACF,OAAO;UAAc6C,IAAI,EAAED;QAAI,GAAlBA,GAAG,CAACE,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAT,MAAc,CAAC;MAC9C,CAAC,CAAC;MAEF,oBAAOvC,OAAA;QAAIiD,SAAS,EAAC,UAAU;QAAAC,QAAA,EAAEV;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAC/C;EAAC;EAAA,OAAA3C,QAAA;AAAA,EArBkBT,SAAS;AAuBhC,eAAeS,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}